// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite" // NOTE: sqlite does not work with NextAuth.js
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MatchStatus {
    WAITING
    STARTED
    FINISHED
}

model Match {
    id            String      @id @default(cuid())
    startsAt      DateTime
    location      String?
    homeTeam      String
    homeTeamImage String?     @db.Text
    awayTeam      String
    awayTeamImage String?     @db.Text
    phase         String?
    status        MatchStatus @default(WAITING)
    homeTeamScore Int         @default(0)
    awayTeamScore Int         @default(0)
    Tournament    Tournament  @relation(fields: [tournamentId], references: [id])
    tournamentId  String
    User          User?       @relation(fields: [userId], references: [id])
    userId        String?
    bets          Bet[]
}

enum TournamentStatus {
    ACTIVE
    BUILDING
    FINISHED
}

model Tournament {
    id        String           @id @default(cuid())
    name      String
    matches   Match[]
    races     Race[]
    User      User             @relation(fields: [userId], references: [id])
    userId    String
    isRace    Boolean          @default(false)
    status    TournamentStatus @default(BUILDING)
    image     String?          @db.Text
    createdAt DateTime         @default(now())
    updatedAt DateTime         @default(now())
}

model Bet {
    id            String @id @default(cuid())
    Match         Match  @relation(fields: [matchId], references: [id])
    matchId       String
    homeTeamScore Int    @default(0)
    awayTeamScore Int    @default(0)
    User          User   @relation(fields: [userId], references: [id])
    userId        String
}

model RaceBet {
    id                  String      @id @default(cuid())
    User                User        @relation(fields: [userId], references: [id])
    userId              String
    Race                Race        @relation(fields: [raceId], references: [id])
    raceId              String
    firstPlaceDriverId  String?
    secondPlaceDriverId String?
    thirdPlaceDriverId  String?
    firstPlaceDriver    RaceDriver? @relation(name: "firstDriverBet", fields: [firstPlaceDriverId], references: [id])
    secondPlaceDriver   RaceDriver? @relation(name: "secondDriverBet", fields: [secondPlaceDriverId], references: [id])
    thirdPlaceDriver    RaceDriver? @relation(name: "thirdDriverBet", fields: [thirdPlaceDriverId], references: [id])
}

enum Role {
    ADMIN
    USER
}

model Race {
    id                  String      @id @default(cuid())
    startsAt            DateTime
    name                String
    round               String?
    circuit             String?
    country             String?
    city                String?
    image               String?     @db.Text
    // relations
    tournament          Tournament? @relation(fields: [tournamentId], references: [id])
    tournamentId        String?
    bets                RaceBet[]
    user                User?       @relation(fields: [userId], references: [id])
    userId              String?
    firstPlaceDriverId  String?
    secondPlaceDriverId String?
    thirdPlaceDriverId  String?
    firstPlaceDriver    RaceDriver? @relation(name: "firstDriver", fields: [firstPlaceDriverId], references: [id])
    secondPlaceDriver   RaceDriver? @relation(name: "secondDriver", fields: [secondPlaceDriverId], references: [id])
    thirdPlaceDriver    RaceDriver? @relation(name: "thirdDriver", fields: [thirdPlaceDriverId], references: [id])
}

model RaceTeam {
    id          String       @id @default(cuid())
    name        String
    nationality String?
    image       String?      @db.Text
    drivers     RaceDriver[]
}

model RaceDriver {
    id               String    @id @default(cuid())
    name             String
    image            String?   @db.Text
    nationality      String?
    dateOfBirth      String?
    permanentNumber  String?
    code             String?
    // Relations
    raceteam         RaceTeam? @relation(fields: [raceTeamId], references: [id])
    raceTeamId       String?
    //
    firstPlaceRaces  Race[]    @relation("firstDriver")
    secondPlaceRaces Race[]    @relation("secondDriver")
    thirdPlaceRaces  Race[]    @relation("thirdDriver")
    firstPlaceBets   RaceBet[] @relation("firstDriverBet")
    secondPlaceBets  RaceBet[] @relation("secondDriverBet")
    thirdPlaceBets   RaceBet[] @relation("thirdDriverBet")
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?      @db.Text
    role          Role         @default(USER)
    accounts      Account[]
    sessions      Session[]
    tournaments   Tournament[]
    matches       Match[]
    bets          Bet[]
    racebets      RaceBet[]
    races         Race[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
